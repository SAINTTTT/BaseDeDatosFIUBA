BASE DE DATOS - Clase 6
Diseño relacional - Formas normales

Un buen diseño relacional preserva la informacion correctamente y posee redundancia minima

Como verificamos un esquema relacional? Como corregimos un esquema mal diseñado?

DEPENDENCIA FUNCIONAL (A -> B)
Cuando las tuplas coiniciden en un grupo de atributos X tienen tambien coincidir en Y se dice que tiene DEPENDENCIA FUNCIONAL
Las DEPENDENCIAS se definen a partir de los tipos o semantica de datos, no de ver los datos
Otra forma de pensarlo: Sabiendo que representa B puedo deducir a que tupla pertenece de ABM
Recordar del ejemplo de clase que estaban los atributos 'departamento', 'profesor' y 'asignatura'; y que la 'asignatura' implicaba el 'departamento'

FormasNormales
Son una serie de estructuras con las que un esquema de base de datos puede cumplir o no
Cada una es mas fuerte que la anterior

1° forma normal (1FN)
Normalizacion: Proceso en el cual se convierte un esquema de BDD en uno equivalente que cumple una forma normal
El objetivo es preservar informacion, eliminar redundancia y evitar anomalias de ABM

La 1FN declara que todos los atributos de mi tabla deben ser atomicos y monovaluados

-------------------------------------------------
2° forma normal (2FN)
No importa lo que agregue del lado izquierdo de la implicacion, va a seguir siendo valida si al principio era una DEPENDENCIA FUNCIONAL
Teniendo una clave primaria que implica a algun otro atributo, se dice que tiene DEPENDENCIA PARCIAL si solo un subconjunto de sus atributos implica a esos atributos
DEPENDENCIA PARCIAL es cuando a la izquierda no tengo toda la PK sino solo una parte de ella
ejemplo de clase: {profesor, asignatura} -> departamento es una DEPENDENCIA PARCIAL

La 2FN es cuando todos sus atributos no primos dependen funcionalmente de forma completa de las claves candidatas
Ej: Tengo la relacion R(x,y,w,z) y me dicen que w->z, entonces puedo decir que CC={x,y,w} es la PK
Porque puedo obtener 'z' a partir de 'w', pero el resto de los atributos ('x' e 'y') no los puedo obtener a partir de ningun otro atributo

Puedo deducir las claves a partir de las dependencias funcionales. Creo que agregando a los atributos de la parte izquierda de la dependencia los atributos que no estan en la dependencia completa obtengo la PK

Cuanto mas atributos ponga del lado izquierdo de la dependencia le doy mas libertad para asociarse con tuplas

Los atributos que estan de la izquierda son mas probables de ser o pertenecer a la PK

Las dependencias tienen la propiedad transitiva. Si A->B y B->C entonces A->C

DESCOMPOSICION es cuando divido la relacion en varias relaciones pero se conservan todos los atributos. Es decir, haciendo la union de las relaciones descompuestas obtengo la relacion original
La DESCOMPOSICION preserva la informacion y las dependencias funcionales

Para que la DESCOMPOSICION preserve la informacion la tengo que hacer en base a las dependencias. Tomar como atributos los que dependen y los que implicacion

------------------------------------------
3° forma normal (3FN)
Se quiere evitar las dependencias transitivas de atributos no primos. Es decir, que una clave implique un atributo no primo y ese atributo implique otro atributo no primo

La 3FN sucede cuando no hay dependencias transitivas de atributos no primos 
Para hacer la descomposicion saco de la relacion todas las implicancias transitivas y las coloco
en una nueva tabla con el atributo no primo que implicaba al otro atributo como PK 

----------------------------------
FORMA NORMAL BOYCE-CODD 
Esta en forma BOYCE-CODD si no existen dependencias transitivas CK -> Y con CK clave candidata
Otra forma: 
